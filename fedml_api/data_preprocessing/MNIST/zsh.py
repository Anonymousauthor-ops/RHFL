

# import numpy as np
# user_num = 100
# def getlist_num(user_num):
#     list_num = []
#     for i in range(user_num):
#         np.random.seed(i)
#         a = np.random.randint(500, 750, 1)
#         list_num.append(a)
#     return list_num
#
# print('训练', sum(getlist_num(user_num)))
#
# def getlist_num1(user_num):
#     list_num = []
#     for i in range(user_num):
#         np.random.seed(i)
#         a = np.random.randint(60, 80, 1)
#         list_num.append(a)
#     return list_num
#
# print('测试', sum(getlist_num1(user_num)))
#
# print("相加的结果：", sum(getlist_num(user_num))+sum(getlist_num1(user_num)))
# client_num_in_total = 100
# malicious_m = 120
# np.random.seed(0)
# # malicious_clients = np.random.choice(1000, self.args.malicious_m, replace=False)
# malicious_clients = np.random.choice(client_num_in_total, malicious_m, replace=False)
# print(malicious_clients)



# T=3, epoch=5, B=50
tt1 = [0.8139859825810966, 0.8739104835799447, 2.174806505174779, 0.7879527123873962, 0.8638907444190294, 0.8418124059711893, 0.8386354889022186, 2.0660559664754308,
       2.1923647148268564, 0.9995120901673561, 0.9203257630268734, 0.8300218619688442, 0.8399797726807924, 2.193426240500757, 0.8747847754813609, 0.8134680818979229, 2.1108278107287277,
       0.9098538313947258, 0.9136197568074037, 0.8329063676670193, 0.832348604189853, 0.9729668557853767, 2.1121227325931673, 0.8111664011064222, 2.1944080267379533, 0.8859998198924586,
       2.1209992285285675, 0.9249173289881302, 0.8722527299719447, 0.8157677859274879, 2.1935271157158747, 0.7636694632077091, 0.7589571597960053, 2.1476650783648856, 0.8413764772693446,
       0.758575082350929,
0.8787152329663513, 0.8395691876915785, 0.7896748978032994, 0.8681814415962436, 0.8646328315661664, 0.7540062907743932, 0.8904545642008058, 0.8975301255259598, 0.8955788804648014,
       0.8205220436965914, 0.8584780170865681, 0.835053027397953, 0.9313533083498478, 0.7996398282696063, 0.790639053361819, 0.8159057530358302, 0.7793804838707049, 2.186587225266223,
       2.177904858896809, 2.0675789500626043, 0.8617503440670543, 0.7790277847364335, 0.8454706220853108, 0.7961057159584015, 0.7147875459366282, 0.8768132785831888, 0.8167205514386296,
       0.909163685332645, 0.7415114931868655, 0.8405962148579684, 0.89238389843645, 0.8412553807622508, 0.897083795789564, 0.898778984609193, 0.875988724776383, 0.7944131133558809, 0.7730614389551598,
       2.1840052604675293, 0.7822988616020391, 2.1813857049942014, 0.7716041598857732, 0.7524701430565781, 2.03799186365945, 0.8281238489231821, 0.794361213161884, 0.809282646471994,
       0.8466830547908103, 0.8566203540171322, 0.7836829332940614, 0.8221996720697058, 2.147691752360417, 0.7866050772777159, 0.7703525117288034, 0.8533485741225573, 0.8602767156468083, 0.74378223793362,
       2.1865776803758408, 2.1762448702285537, 0.8262225199652754, 2.101935733648447, 0.8271740679771213, 0.8727334833119885, 0.7846430058798027, 0.8897421974600072, 0.4361140943621299]



tt2 = [0.30308967102216283, 0.29154157031982864, 2.05859985742996, 0.26049853977976273, 0.3371976360862073, 0.291988996268871, 0.30076605267531703, 1.8271914499647477,
      2.1791827811513627, 0.5344411045726802, 0.3088307859120416, 0.296869899513849, 0.31412538037603277, 2.1330531431456743, 0.3190286252983525, 0.36467843296804603, 1.9208264450528731,
      0.36483584508570216, 0.33689674291378735, 0.2916458100825548, 0.3132812733994797, 0.33411343994695447, 1.9213713519034847, 0.30537878581306943, 2.187865813454585, 0.3865202212240547,
      1.9149369552731514, 0.3106979022680137, 0.2868439191296464, 0.3096779685622702, 2.128437252839406, 0.32686995134072405, 0.28422495523732827, 1.9559462799475742, 0.3215881578281084,
      0.27039765238033897, 0.3373286426111008, 0.2987163889608704, 0.3079663145435807, 0.33472924063389653, 0.31323027575813367, 0.29857228777903533, 0.3021737187158042, 0.3446426221022481,
      0.31748210456795417, 0.3266579627590648, 0.3201068303217113, 0.306814155849861, 0.3074212204106152, 0.3239631434235332, 0.3027446068220717, 0.26442597737768664, 0.30703195204585787,
      2.1686989536825214, 2.049565490984148, 1.8362183507059662, 0.31024068993342635, 0.27424259034549475, 0.2960237615465842, 0.3039983114104389, 0.27225865522845527, 0.307374818129465,
      0.2654298646671053, 0.33114681211723523, 0.3144451276685244, 0.3021740237979049, 0.3054020798550202, 0.3016418611826865, 0.3193744812258764, 0.33619094838920455, 0.31583875988706434,
      0.3020745194685019, 0.2579749762242297, 2.124477258095374, 0.28569533240727407, 2.057694215774536, 0.26129834120710893, 0.2839078137211295, 1.8289804816246034, 0.26914654943965755,
      0.2973255893311408, 0.28339029019535106, 0.3221556526619679, 0.2847487302883765, 0.28445603851395757, 0.31688030210980134, 1.9526999855041502, 0.31554251495901847, 0.28651342020344195,
      0.34728959733190445, 0.28393425305839626, 0.2784103078034925, 2.1799694935480756, 2.103375917050376, 0.32528559972626575, 1.940760113642766, 0.28523180763063544, 0.3495329928063488,
      0.29191757362180704, 0.34890053639750157, 0.2031170137934913]

tt3 = [0.169666902108635, 0.1522106661875215, 2.023488427987739, 0.1298625050095429, 0.20462182325019737, 0.14958589276337686, 0.19638690022402444, 1.7601482245851963,
       2.171113220964159, 0.4170351886086994, 0.15929844674480825, 0.178206093327996, 0.17686078343500283, 2.122988155332662, 0.20266621366341706, 0.23393479659887295, 1.880860537201611,
       0.23959124457511694, 0.20061450998298822, 0.1655618813610636, 0.19126888445733733, 0.189489906412528, 1.8805736691721022, 0.17694022272303067, 2.1863013577105397, 0.18882373650485534,
       1.8452924179179326, 0.16687959087206622, 0.16747071951277026, 0.1805294871440209, 2.098045858630427, 0.15200312397078755, 0.1614422285473362, 1.9147773809157886, 0.1989785735358666,
       0.15196043059670916, 0.2008039299151278, 0.17724269236688717, 0.19897285622769162, 0.19814811363557966, 0.17142900370404518, 0.17718883736557994, 0.18335086378291798, 0.21954145145177706,
       0.17978284928517846, 0.19442270313796234, 0.2174227801003102, 0.2220388662397454, 0.15983951342850924, 0.2032682788358487, 0.18481230758753714, 0.13914154197518655, 0.1912278247680515,
       2.1638446713393593, 2.019450203834041, 1.771358661920252, 0.1854271741197208, 0.15678302302758185, 0.1899833669377215, 0.18635470962172432, 0.15586238341392872, 0.18164507614642691,
       0.14539509212302687, 0.19596523923122072, 0.22088542316441556, 0.18768860300748863, 0.1824140378377006, 0.17295416337683012, 0.1863097006904386, 0.20045832139855652, 0.17954791429300054,
       0.17702905785551934, 0.14959438709969014, 2.1142054741199203, 0.16858674214630756, 2.0259085741043092, 0.15103881626720922, 0.16648659834625304, 1.7851166587216514, 0.1451988362541454,
       0.18618054961912361, 0.1558035340025335, 0.1979841249280284, 0.15789416099393394, 0.17539222712225433, 0.19858091926721275, 1.911549111512991, 0.1954211922655877, 0.16693091775458824,
       0.20328593448126836, 0.16524805383582133, 0.1677021517247126, 2.163987147997296, 2.0803971425810857, 0.2342382120656903, 1.8868171205887427, 0.1596321686068392, 0.20227363894661982,
       0.1829941800911911, 0.2217421565042247, 0.15493860064434076]

# cuount1 = []
# for i in tt1:
#     if i <= 0.4361140943621299:   # 上一个迭代t-1的全局测试损失
#         cuount1.append(i)
# print(len(cuount1)-1)

cuount2 = []
for i in tt3:
    if i <= 0.4361140943621299:   # 上一个迭代t-1的全局测试损失
        cuount2.append(i)
print(len(cuount2)-1)

cuount3 = []
for i in tt3:
    if i <= 0.2031170137934913:   # 上一个迭代t-1的全局测试损失
        cuount3.append(i)
# print(len(cuount3)-1)

import numpy as np
from sklearn import preprocessing

def size_normalization(data):  # data size归一化
    data = np.array(data, dtype='float64')
    result = data.reshape(-1, 1)
    min_max_scaler = preprocessing.MinMaxScaler(feature_range=(1, 2), copy=1)
    x_minmax = min_max_scaler.fit_transform(result)
    x_minmax = list(np.ravel(x_minmax.tolist()))
    return x_minmax
a = [-0.1,0.02]

# print(size_normalization(a))


a=[1,3,4,5]
# print(0-np.array(a[:-1]))

def isaa(k):
    print(k)
    print("------")
    return  True
hdict={0:[3,['cnn_2'],4],1:[4,['cnn_1'],6],2:[4,['cnn_1'],6],3:[8,['cnn_0'],999],4:[777,['cnn_0'],943]}
B={'cnn_0': 3, 'cnn_1': 4, 'cnn_2': 3}
task_={'cnn_0': [3,4], 'cnn_1': [1,2], 'cnn_2':[0]}

for k,v in B.items():
    mid=list(filter(lambda x:x[0] in task_[k],hdict.items()))
    print(mid)

